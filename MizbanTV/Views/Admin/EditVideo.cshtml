@model MizbanTV.Models.AdminEditVideoViewModel
@{
    ViewBag._Title = "ویرایش مطلب";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@ViewBag._Title</h2>



@using (Html.BeginForm("EditVideo", "Admin", FormMethod.Post, new { encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Video</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)
        @Html.HiddenFor(model => model.FileName)
        @Html.HiddenFor(model => model.IsNewFileUploaded)

        <div class="form-group">
            @Html.LabelFor(model => model.IsActivated, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsActivated, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsActivated, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(x => Model.CategoryID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.DropDownListFor(x => Model.CategoryID, new SelectList(ViewBag.Categories, "ID", "Name"), "--لطفا انتخاب کنید--", htmlAttributes: new { @class = "form-control", id = "Categories" })
                @Html.ValidationMessageFor(x => x.CategoryID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @(Html.Kendo().Upload()
                            .Name("videos")
                            .Multiple(false)
                            .Async(a => a
                                .Save("SaveVideo", "Admin")
                                .AutoUpload(true)
                            )
                            .Files(files =>
                            {
                                if (!string.IsNullOrEmpty(Model.FileName))
                                    files.Add().Name(Model.FileName).Size(Model.Size).Extension(Model.Extension);
                            })
                            .Events(e => e
                                .Upload("onUpload")
                                .Success("onSuccess")
                            )
                            .Validation(validation => validation.AllowedExtensions(new string[] { ".mp4" }))
                )
                @Html.ValidationMessageFor(x => x.FileName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Images, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Images, new { type = "file", name = "Files" })
                @Html.ValidationMessageFor(model => model.Images, "", new { @class = "text-danger" })
            </div>
        </div>

        
        <div class="form-group">
            @Html.LabelFor(model => model.AdvertiseFileName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AdvertiseFileName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.TextBoxFor(model => model.Advertises, new { type = "file", name = "Files" })
                @Html.ValidationMessageFor(model => model.AdvertiseFileName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AdvertiseLink, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AdvertiseLink, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AdvertiseLink, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="دخیره" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("بازگشت", "Index")
</div>

@section scripts {

    <script>

        function onUpload(e) {
            e.data = { ID: $("#ID").val() };
        }
        function onSuccess(e) {
            $("#FileName").val(e.files[0].name);
            $("#IsNewFileUploaded").val(true);
        }

    </script>

}
